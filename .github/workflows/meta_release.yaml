name: Meta Release

on:
  push:
    tags:
      - 'v*.*.*'
  repository_dispatch:
    types: [image-ready] # Triggered by component builds finishing

jobs:
  dispatch-builds:
    name: Create Release & Dispatch Builds
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Get the version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Create a GitHub Release marked as pre-release to track progress
      - name: Create Draft Pre-Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Unbind ${{ steps.get_version.outputs.VERSION }} (Building...)
          body: |
            Builds initiated for release ${{ steps.get_version.outputs.VERSION }}. Status updates will follow.

            ## Component Status:
            - Builder: In Progress
            - API: In Progress
            - Operator: In Progress
            - UI: In Progress
          draft: false
          prerelease: true # Start as pre-release

      # Trigger all component builds simultaneously
      - name: Trigger Builder + API Build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind-api
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}",
              "builder_image": "ghcr.io/unbindapp/unbind-builder:${{ steps.get_version.outputs.VERSION }}"
            }

      - name: Trigger Operator Build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind-operator
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}"
            }

      - name: Trigger UI Build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind # Adjust repo name if different for UI
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}"
            }

  update-status:
    name: Update Release Status
    concurrency:
      group: release-status-${{ github.event.client_payload.release_id }}
      cancel-in-progress: false
    # Run only when a component build sends 'image-ready'
    if: github.event_name == 'repository_dispatch' && github.event.action == 'image-ready'
    runs-on: ubuntu-latest
    steps:
      - name: Update Release Body and Finalize if Ready
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = '${{ github.event.client_payload.release_id }}';
            const version = '${{ github.event.client_payload.version }}';
            const component = '${{ github.event.client_payload.component }}';
            const componentDisplay = component.charAt(0).toUpperCase() + component.slice(1);

            if (!releaseId || !version || !component) {
              core.setFailed('Missing required payload data: release_id, version, or component.');
              return;
            }
            console.log(`Received 'image-ready' for component: ${componentDisplay}, Version: ${version}, Release ID: ${releaseId}`);

            try {
              const { data: release } = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });

              let body = release.body;
              console.log(`Current release body:\n${body}`);

              const componentPattern = new RegExp(`^- ${componentDisplay}:.*$`, 'im');
              const newStatusLine = `- ${componentDisplay}: Ready`;

              if (body.match(componentPattern)) {
                body = body.replace(componentPattern, newStatusLine);
                console.log(`Updated status for ${componentDisplay}.`);
              } else {
                console.warn(`Pattern for ${componentDisplay} not found in release body. Appending status.`);
                body += `\n${newStatusLine}`;
              }
              console.log(`Tentative updated body:\n${body}`);

              const lowercaseBody = body.toLowerCase();
              const allReady = 
                lowercaseBody.includes('- builder: ready') && 
                lowercaseBody.includes('- api: ready') && 
                lowercaseBody.includes('- operator: ready') && 
                lowercaseBody.includes('- ui: ready');
              
              console.log(`All components ready? ${allReady}`);

              if (allReady) {
                const finalBody = [
                  `## üöÄ Unbind ${version}`,
                  "",
                  "### üì¶ Container Images",
                  "",
                  "| Component | Image | Pull Command |",
                  "|-----------|-------|--------------|",
                  `| Builder   | [\`ghcr.io/unbindapp/unbind-builder:${version}\`](https://github.com/unbindapp/unbind-api/pkgs/container/unbind-builder) | \`docker pull ghcr.io/unbindapp/unbind-builder:${version}\` |`,
                  `| API       | [\`ghcr.io/unbindapp/unbind-api:${version}\`](https://github.com/unbindapp/unbind-api/pkgs/container/unbind-api) | \`docker pull ghcr.io/unbindapp/unbind-api:${version}\` |`,
                  `| Operator  | [\`ghcr.io/unbindapp/unbind-operator:${version}\`](https://github.com/unbindapp/unbind-operator/pkgs/container/unbind-operator) | \`docker pull ghcr.io/unbindapp/unbind-operator:${version}\` |`,
                  `| UI / Web  | [\`ghcr.io/unbindapp/unbind-ui:${version}\`](https://github.com/unbindapp/unbind/pkgs/container/unbind-ui) | \`docker pull ghcr.io/unbindapp/unbind-ui:${version}\` |`,
                  "",
                  "### üîó Component Repositories",
                  "",
                  `- [Builder & API](https://github.com/unbindapp/unbind-api/releases/tag/${version})`,
                  `- [Operator](https://github.com/unbindapp/unbind-operator/releases/tag/${version})`,
                  `- [UI / Web](https://github.com/unbindapp/unbind/releases/tag/${version})`,
                  "",
                  "### üìù Release Notes",
                  "",
                  "For detailed release notes, please check the individual component repositories linked above."
                ].join("\n");

                console.log(`Finalizing release ${releaseId} for version ${version}.`);
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: `Unbind ${version}`,
                  body: finalBody,
                  draft: false,  // Explicitly set draft to false
                  prerelease: false
                });
                console.log(`Release ${releaseId} successfully finalized.`);

              } else {
                console.log(`Updating release ${releaseId} body, still waiting for other components.`);
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  body: body
                });
                console.log(`Release ${releaseId} status updated for ${componentDisplay}.`);
              }

            } catch (error) {
              console.error(`Error processing update for release ${releaseId}: ${error.message}`);
              core.setFailed(`Failed to update release: ${error.message}`);
            }
