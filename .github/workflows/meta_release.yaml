name: Meta Release

on:
  push:
    tags:
      - 'v*.*.*'
  repository_dispatch:
    types: [image-ready]

jobs:
  dispatch-builds:
    name: Dispatch Builds
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Create a release to track progress
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Unbind ${{ steps.get_version.outputs.VERSION }} (In Progress)
          body: |
            Release in progress...

            ## Component Status:
            - Builder: :hourglass: In Progress
            - API: :hourglass: Waiting
            - Operator: :hourglass: In Progress
            - UI: :hourglass: In Progress
          draft: false
          prerelease: true

      # Step 1: Trigger unbind-builder build first
      - name: Trigger unbind-builder build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind-api
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}"
            }

      # Also trigger operator and UI in parallel
      - name: Trigger unbind-operator build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind-operator
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}"
            }

      - name: Trigger unbind-ui build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind
          event-type: build-release
          client-payload: |
            {
              "version": "${{ steps.get_version.outputs.VERSION }}",
              "release_id": "${{ steps.create_release.outputs.id }}"
            }

  update-status:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'image-ready'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update release status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get current release info
            const releaseId = '${{ github.event.client_payload.release_id }}';
            const version = '${{ github.event.client_payload.version }}';
            const component = '${{ github.event.client_payload.component }}';

            try {
              // First get the current release data
              const release = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });
              
              // Parse the current body
              let body = release.data.body;
              
              // Update the status of the current component
              const componentPattern = new RegExp(`${component}:.*$`, 'im');
              body = body.replace(componentPattern, `${component}: :white_check_mark: Ready`);
              
              // Check if all components are ready
              const allReady = [
                'Builder: :white_check_mark: Ready',
                'API: :white_check_mark: Ready',
                'Operator: :white_check_mark: Ready',
                'UI: :white_check_mark: Ready'
              ].every(status => body.includes(status));
              
              // Update the release
              if (allReady) {
                // All components are ready, make final release
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: `Unbind ${version}`,
                  body: `## Docker images for \`${version}\`
                  | Component | Pull command |
                  |-----------|--------------|
                  | Builder   | [\`docker pull unbindapp/unbind-builder:${version}\`](https://hub.docker.com/r/unbindapp/unbind-builder/tags?name=${version}) |
                  | API       | [\`docker pull unbindapp/unbind-api:${version}\`](https://hub.docker.com/r/unbindapp/unbind-api/tags?name=${version}) |
                  | Operator  | [\`docker pull unbindapp/unbind-operator:${version}\`](https://hub.docker.com/r/unbindapp/unbind-operator/tags?name=${version}) |
                  | Web       | [\`docker pull unbindapp/unbind-ui:${version}\`](https://hub.docker.com/r/unbindapp/unbind-ui/tags?name=${version}) |`,
                  prerelease: false
                });
                
                console.log(`All components are ready! Final release created for ${version}.`);
              } else {
                // Update status but keep as prerelease
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  body: body,
                  prerelease: true
                });
                
                console.log(`Updated status for ${component}. Waiting for other components...`);
              }
              
            } catch (error) {
              console.error(`Error updating release: ${error.message}`);
              core.setFailed(error.message);
            }

  continue-after-image:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'image-ready' && github.event.client_payload.component == 'builder'
    runs-on: ubuntu-latest
    needs: update-status
    steps:
      - name: Trigger API build with builder image
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: unbindapp/unbind-api
          event-type: build-release
          client-payload: |
            {
              "version": "${{ github.event.client_payload.version }}",
              "builder_image": "unbindapp/unbind-builder:${{ github.event.client_payload.version }}",
              "release_id": "${{ github.event.client_payload.release_id }}"
            }
